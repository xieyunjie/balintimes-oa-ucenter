<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.UserMapper">

	<resultMap type="User" id="userResultMap">
		<id property="uid" column="uid"/>
		<result property="username" column="username"/>
		<result property="password" column="password"/>
		<result property="isadmin" column="isadmin"/>
		<result property="employeename" column="employeename"/>
		<result property="isenable" column="isenable"/>
		<result property="delflag" column="delflag"/>
		<result property="usertype" column="usertype"/>
		<result property="usertypename" column="usertypename"/>
		<result property="email" column="email"/>
		<result property="comment" column="comment"/>
		<result property="createby" column="createby"/>
		<result property="createtime" column="createtime"/>
		<result property="editby" column="editby"/>
		<result property="edittime" column="edittime"/>
		<result property="lastlogin" column="lastlogin"/>
		<result property="sex" column="sex"/>
		<result property="birthday" column="birthday"/>
		<result property="idcard" column="idcard"/>
		<result property="address" column="address"/>
		<result property="mobile" column="mobile"/>
		<result property="telephone" column="telephone"/>
		<result property="emergencycontact" column="emergencycontact"/>
		<result property="avatarurl" column="avatarurl"/>
		<result property="postuid" column="postuid"/>
		<result property="postname" column="postname"/>
		<result property="userpostuid" column="userpostuid"/>
		<result property="organizationuid" column="organizationuid"/>
		<result property="organizationname" column="organizationname"/>
	</resultMap>

	<sql id="userColumns">
		a.uid,a.username,a.password,a.isadmin,
		a.employeename,a.isenable,a.delflag,a.usertype,
		a.email,a.comment,a.createby,a.createtime,
		a.editby,a.edittime,a.lastlogin, b.name as usertypename
	</sql>

	<sql id="userTreeColumns">
		a.*, d.name as usertypename,b.uid as userpostuid,b.postuid,c.name as postname
	</sql>
	
	<sql id="userTreeSelectColumns">
		a.*,c.uid as postuid, c.name as postname,c.parentuid, d.name as usertypename,b.uid as userpostuid,
		e.uid as organizationuid,e.name as organizationname
	</sql>
	
	<insert id="createUser" parameterType="User" statementType="PREPARED" keyProperty="uid" keyColumn="uid"
		useGeneratedKeys="false">
		insert into user (uid, username, password, isadmin, employeename, isenable, delflag,
		usertype, email,
		comment, createby, createtime,
		sex,birthday,idcard,address,mobile,telephone,emergencycontact,avatarurl )
		values( #{uid}, #{username}, #{password}, #{isadmin}, #{employeename}, #{isenable},
		#{delflag},
		#{usertype}, #{email}, #{comment}, #{createby}, #{createtime},
		#{sex},#{birthday},#{idcard},#{address},#{mobile},#{telephone},#{emergencycontact},#{avatarurl})
	</insert>

	<insert id="createUserPost" parameterType="User" statementType="PREPARED" keyProperty="uid" keyColumn="uid"
		useGeneratedKeys="false">
		insert into userpost (uid, useruid, postuid)
		values(uuid(),#{uid}, #{postuid})
	</insert>
	
	<update id="UpdatePassword" parameterType="Map">
		update user set password=#{password} where uid = #{uid}
	</update>

	<update id="UpdateLastLogin" parameterType="String">
        update user set lastlogin = now() where username = #{username}
	</update>


	<update id="updateUser" parameterType="User" statementType="PREPARED" keyProperty="uid" keyColumn="uid">
		update user
		set username = #{username},
		isadmin = #{isadmin},
		employeename = #{employeename},
		isenable = #{isenable},
		usertype =
		#{usertype},
		email = #{email},
		comment = #{comment},
		editby = #{editby},
		edittime = #{edittime}
		where
		uid = #{uid}
	</update>

	<update id="updateUserPost" parameterType="User" statementType="PREPARED" keyProperty="uid" keyColumn="uid">
		update userpost
		set postuid=#{postuid}
		where
		useruid=#{uid} and uid=#{userpostuid}
	</update>
	
	<update id="deleteUser" parameterType="Map" statementType="PREPARED">
		update user set delflag =
		1,editby=#{employeename},edittime=now() where uid=#{uid}
	</update>

	<select id="GetUserByEmpName" statementType="PREPARED" resultType="User" parameterType="String">
		select
			<include refid="userColumns"/>
		from user a
        	inner join usertype b on a.usertype = b.uid
        where 
        	delflag = 0
        	and a.employeename like #{empName}
			 
	</select>
	
	<select id="getUser" parameterType="string" resultType="User">
        select
		<include refid="userColumns"/>
        from user a
        inner join usertype b on a.usertype = b.uid
        where a.uid = #{uid} and delflag = 0
	</select>

	<select id="CheckUserName" parameterType="String" resultType="String">
		select uid from user where username =
		#{username}
		and delflag = 0
	</select>
	
	<select id="CheckEmployeeName" parameterType="String" resultType="String">
		select uid from user where employeename =
		#{employeename}
		and delflag = 0
	</select>

	<select id="GetUserList" statementType="PREPARED" parameterType="string" resultMap="userResultMap">
        select
		<include refid="userColumns"/>
        from user a
        inner join usertype b on a.usertype = b.uid
        where a.delflag = 0
	</select>

	<select id="getUserPassword" statementType="PREPARED" resultType="String">
		select password from user where username =
		#{username} and delflag = 0
	</select>

	<select id="getUserByName" statementType="PREPARED" resultType="User">
        select
		<include refid="userColumns"/>
        from user a
        inner join usertype b on a.usertype = b.uid
        where a.username = #{username}
	</select>

	<select id="GetUserTotalCount" parameterType="Map" resultType="int">
        select count(*) from user a
        inner join usertype b on a.usertype = b.uid
        where a.delflag = 0
		<if test="username!=null and username!=''">and a.username like "%"#{username}"%"</if>
		<if test="employeename!=null and employeename!=''">and a.employeename like "%"#{employeename}"%"</if>
		<if test="usertype!=null and usertype!=''">and a.usertype = #{usertype}</if>
		<if test="isenable!=null and isenable!=''">and a.isenable = #{isenable}</if>

	</select>

	<select id="GetUserByPage" parameterType="Map" resultType="User">
        select
		<include refid="userColumns"/>
        from user a
        inner join usertype b on a.usertype = b.uid
        where a.delflag = 0
		<if test="username!=null and username!=''">and a.username like "%"#{username}"%"</if>
		<if test="employeename!=null and employeename!=''">and a.employeename like "%"#{employeename}"%"</if>
		<if test="usertype!=null and usertype!=''">and a.usertype = #{usertype}</if>
		<if test="isenable!=null and isenable!=''">and a.isenable = #{isenable}</if>
        ORDER BY #{orderby} limit #{start},#{pageSize}
	</select>


	<select id="Pro_UserList" statementType="CALLABLE" parameterType="Map" resultType="User">
        call pro_GetUserList(#{username,mode=IN,jdbcType=VARCHAR},
                            #{employeename,mode=IN,jdbcType=VARCHAR},
                            #{usertype,mode=IN,jdbcType=VARCHAR},
                            #{isenable,mode=IN,jdbcType=INTEGER},
                            #{page,mode=IN,jdbcType=INTEGER},
                            #{pageSize,mode=IN,jdbcType=INTEGER},
                            #{totalcount,mode=OUT,jdbcType=INTEGER})
	</select>



	<select id="GetUserTreeList" statementType="PREPARED" parameterType="string" resultMap="userResultMap">
    	select 
		<include refid="userTreeColumns" />
        from user a 
        inner join userpost b on a.uid=b.useruid   
        inner join post c on c.uid=b.postuid    
        inner join usertype d on d.uid = a.usertype
        where a.delflag=0
	</select>
    
	<select id="GetUserTreeSet" parameterType="String" statementType="PREPARED" resultType="User">		
		select 
		<include refid="userTreeColumns" />
        from user a 
        inner join userpost b on a.uid=b.useruid
        inner join post c on c.uid=b.postuid	
        inner join usertype d on d.uid = a.usertype
        where a.delflag=0 and (FIND_IN_SET(c.uid,fun_GetUserTreeSet(#{employeename})) or FIND_IN_SET(a.uid,fun_GetUserTreeSet(#{employeename})))
	</select>
	
	<select id="GetUserTreeListByCondition" parameterType="Map" resultType="User">
    	select 
		<include refid="userTreeSelectColumns" />
        from user a 
        inner join userpost b on a.uid=b.useruid  
        inner join post c on b.postuid=c.uid            
        inner join usertype d on d.uid = a.usertype      
        inner join organization e on c.organizationuid=e.uid 
        where a.delflag=0		
		<if test="username!=null and username!=''">and a.username like "%"#{username}"%"</if>
		<if test="employeename!=null and employeename!=''">and a.employeename like "%"#{employeename}"%"</if>		
		<if test="postuid!=null and postuid!=''">and c.uid=#{postuid}</if>	
		<if test="organizationuid!=null and organizationuid!=''">and e.organizationuid=#{organizationuid}</if>			
	</select>

	
	<select id="GetOneUser" parameterType="string" resultType="User">
        select
		<include refid="userTreeColumns"/>
        from user a 
        inner join userpost b on a.uid=b.useruid
        inner join post c on c.uid=b.postuid	
        inner join usertype d on d.uid = a.usertype
        where a.uid = #{uid} and a.delflag = 0
	</select>
    
	<select id="GetOneUserParent" parameterType="string" resultType="User">
        select
		<include refid="userTreeColumns"/>
        from user a 
        inner join userpost b on a.uid=b.useruid
        inner join post c on c.uid=b.postuid	
        inner join usertype d on d.uid = a.usertype
        where a.delflag = 0 and c.uid=#{parentuid}
	</select>
	
	<select id="GetEmployee" parameterType="string" resultType="User">
        select
		a.*,d.name as usertypename
        from user a        
        inner join usertype d on d.uid = a.usertype
        where a.delflag = 0 and a.username=#{username}
	</select>
	
	<select id="GetSuperiors" parameterType="string" resultType="User">
       SELECT
		<include refid="userTreeColumns"/>
		FROM user a
		LEFT JOIN userpost b on a.uid=b.useruid
		LEFT JOIN post c ON c.uid=b.postuid
		inner join usertype d on d.uid = a.usertype
		where a.delflag = 0 and FIND_IN_SET(c.uid,fun_GetUserParent(#{username}))
	</select>
	
	<select id="GetSubordinates" parameterType="string" resultType="User">
       SELECT
		<include refid="userTreeColumns"/>
		FROM user a
		LEFT JOIN userpost b on a.uid=b.useruid
		LEFT JOIN post c ON c.uid=b.postuid
		inner join usertype d on d.uid = a.usertype
		where a.delflag = 0 and FIND_IN_SET(c.uid,fun_GetUserChildren(#{username}))
	</select>
</mapper>